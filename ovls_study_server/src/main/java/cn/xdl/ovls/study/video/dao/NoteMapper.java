package cn.xdl.ovls.study.video.dao;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.One;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.mapping.FetchType;
import org.apache.ibatis.type.JdbcType;

import cn.xdl.ovls.study.video.bean.Note;

public interface NoteMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table note
     *
     * @mbggenerated Wed Oct 03 18:44:56 CST 2018
     */
    @Delete({
        "delete from note",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table note
     *
     * @mbggenerated Wed Oct 03 18:44:56 CST 2018
     */
    @Insert({
        "insert into note (publish_time, ",
        "like_count, user_id, ",
        "video_id, title, ",
        "context)",
        "values (#{publishTime,jdbcType=TIMESTAMP}, ",
        "#{likeCount,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, ",
        "#{videoId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, ",
        "#{context,jdbcType=LONGVARCHAR})"
    })
    @Options(useGeneratedKeys=true,keyProperty="id",keyColumn="id")
    int insert(Note record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table note
     *
     * @mbggenerated Wed Oct 03 18:44:56 CST 2018
     */
    @InsertProvider(type=NoteSqlProvider.class, method="insertSelective")
    int insertSelective(Note record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table note
     *
     * @mbggenerated Wed Oct 03 18:44:56 CST 2018
     */
    @Select({
        "select",
        "id, publish_time, like_count, user_id, video_id, title, context",
        "from note",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="publish_time", property="publishTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="like_count", property="likeCount", jdbcType=JdbcType.INTEGER),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER),
        @Result(column="video_id", property="videoId", jdbcType=JdbcType.INTEGER),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="context", property="context", jdbcType=JdbcType.LONGVARCHAR)
    })
    Note selectByPrimaryKey(Integer id);

    /**
     * 通过course ID 查询所有的笔记信息
     * */
    @Select({
        "select",
        "id, publish_time, like_count, user_id, video_id, title, context",
        "from note",
        "where video_id in (select video.id from video where chapter_id in ",
        "(select chapter.id from chapter where course_id = #{course_id,jdbcType=INTEGER}))"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="publish_time", property="publishTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="like_count", property="likeCount", jdbcType=JdbcType.INTEGER),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER),
        @Result(column="video_id", property="videoId", jdbcType=JdbcType.INTEGER),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="context", property="context", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="user_id",property="user",one=@One(fetchType=FetchType.EAGER,
        		select="cn.xdl.ovls.study.user.dao.UserMapper.selectByPrimaryKey")),
        @Result(column="video_id",property="video",one=@One(fetchType=FetchType.EAGER,
        		select="cn.xdl.ovls.study.video.dao.VideoMapper.selectByPrimaryKey"))
    })
    List<Note> selectByCourse(Integer course_id);
    
    /**
     * 通过video_id 查询所有的笔记
     * */
    @Select({
        "select",
        "id, publish_time, like_count, user_id, video_id, title, context",
        "from note",
        "where video_id = #{video_id,jdbcType=INTEGER}",
        "order by publish_time desc"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="publish_time", property="publishTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="like_count", property="likeCount", jdbcType=JdbcType.INTEGER),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER),
        @Result(column="video_id", property="videoId", jdbcType=JdbcType.INTEGER),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="context", property="context", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="user_id",property="user",one=@One(fetchType=FetchType.EAGER,
        		select="cn.xdl.ovls.study.user.dao.UserMapper.selectByPrimaryKey"))
    })
    List<Note> selectByVideo(Integer video_id);
    
    
    /**
     * 通过video和user查询笔记,按照时间降序排列
     * */
    @Select({
        "select",
        "id, publish_time, like_count, user_id, video_id, title, context",
        "from note",
        "where video_id = #{0,jdbcType=INTEGER}",
        "and user_id = #{1,jdbcType=INTEGER}",
        "order by publish_time desc"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="publish_time", property="publishTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="like_count", property="likeCount", jdbcType=JdbcType.INTEGER),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER),
        @Result(column="video_id", property="videoId", jdbcType=JdbcType.INTEGER),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="context", property="context", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="user_id",property="user",one=@One(fetchType=FetchType.EAGER,
        		select="cn.xdl.ovls.study.user.dao.UserMapper.selectByPrimaryKey"))
    })
    List<Note> selectByVideoAndUser(Integer video_id,Integer user_id);
    
    /**
     * 查询某个视频中包含的笔记的数量
     * */
    
    @Select({
        "select",
        "count(*)",
        "from note",
        "where video_id = #{video_id,jdbcType=INTEGER}"
    })
    @Results()
    int selectCountByVideo(Integer video_id);
   
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table note
     *
     * @mbggenerated Wed Oct 03 18:44:56 CST 2018
     */
    @UpdateProvider(type=NoteSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Note record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table note
     *
     * @mbggenerated Wed Oct 03 18:44:56 CST 2018
     */
    @Update({
        "update note",
        "set publish_time = #{publishTime,jdbcType=TIMESTAMP},",
          "like_count = #{likeCount,jdbcType=INTEGER},",
          "user_id = #{userId,jdbcType=INTEGER},",
          "video_id = #{videoId,jdbcType=INTEGER},",
          "title = #{title,jdbcType=VARCHAR},",
          "context = #{context,jdbcType=LONGVARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKeyWithBLOBs(Note record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table note
     *
     * @mbggenerated Wed Oct 03 18:44:56 CST 2018
     */
    @Update({
        "update note",
        "set publish_time = #{publishTime,jdbcType=TIMESTAMP},",
          "like_count = #{likeCount,jdbcType=INTEGER},",
          "user_id = #{userId,jdbcType=INTEGER},",
          "video_id = #{videoId,jdbcType=INTEGER},",
          "title = #{title,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Note record);
}